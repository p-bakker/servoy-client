describe('styles helpers', function() {
	//jasmine.DEFAULT_TIMEOUT_INTERVAL = 1000;
	var $scope;
	var $compile;
	var $timeout;
	var formatFilter;

	beforeEach(function(){		
		module('servoy-components')  // generated by ngHtml2JsPreprocessor from all .html template files , as strings in the svyTemplate module
		// 1. Include your application module for testing.
		module('servoyApp');
		angular.module('pushToServerData', ['pushToServer']);
		  
		// 2. Define a new mock module. (don't need to mock the servoy module for tabpanel since it receives it's dependencies with attributes in the isolated scope)
		// 3. Define a provider with the same name as the one you want to mock (in our case we want to mock 'servoy' dependency.
//		angular.module('servoyMock', [])
//		.factory('$X', function(){
//		// Define you mock behaviour here.
//		});

		// 4. Include your new mock module - this will override the providers from your original module.
//		angular.mock.module('servoyMock');

		// 5. Get an instance of the provider you want to test.
		inject(function(_$rootScope_,_$compile_ ,$templateCache,_$q_,_$timeout_,_formatFilterFilter_){

			$compile = _$compile_;
			$timeout = _$timeout_;
			$scope = _$rootScope_.$new(true);
			formatFilter = _formatFilterFilter_;
		})
		// mock timout
		jasmine.clock().install();
	});
	afterEach(function() {
		jasmine.clock().uninstall();
	})
	it("should apply svy-imagemediaid", function() { 
		// is is a design time property, model is sent before

		var template = $('<div><div><div" svy-imagemediaid="myModel"></div></div></div>');
		// this directive requires to be in a component with an isolated scope
		var isolatedScope = $scope.$new(true);
		isolatedScope.myModel = {img: 'image1.png',
				componentSize:{width: 16, height: 16},
				rollOverImg:null, visible:true};
		template.data('$isolateScope',isolatedScope);
		var myDiv = $compile(template)(isolatedScope);
		isolatedScope.$digest();
		$timeout.flush();
		expect($(myDiv[0].firstElementChild.firstElementChild).css('background-image')).toContain('image1.png');
		
		// change image at runtime
		isolatedScope.myModel = {img: 'image2.png?imageWidth=121&imageHeight=92', componentSize:{width: 16, height: 16},rollOverImg:null,visible:true};
		isolatedScope.$digest();
		$timeout.flush();
		expect($(myDiv[0].firstElementChild.firstElementChild).css('background-image')).toContain('image2.png');
	});

}); 
